/**
 * IdCheck.IO API
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['invoker/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.idcheckio_nodejs_client) {
      root.idcheckio_nodejs_client = {};
    }
    root.idcheckio_nodejs_client.ImageRequest = factory(root.idcheckio_nodejs_client.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ImageRequest model module.
   * @module invoker/model/ImageRequest
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>ImageRequest</code>.
   * @alias module:invoker/model/ImageRequest
   * @class
   * @param frontImage {String} frontImage containing front daylight image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   * @param frontImageIr {String} frontImage containing front infrared image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   * @param frontImageUv {String} frontImage containing front ultraviolet image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   */
  var exports = function(frontImage, frontImageIr, frontImageUv) {
    var _this = this;


    _this['frontImage'] = frontImage;
    _this['frontImageIr'] = frontImageIr;
    _this['frontImageUv'] = frontImageUv;






  };

  /**
   * Constructs a <code>ImageRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:invoker/model/ImageRequest} obj Optional instance to populate.
   * @return {module:invoker/model/ImageRequest} The populated <code>ImageRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('apiVersion')) {
        obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
      }
      if (data.hasOwnProperty('frontImage')) {
        obj['frontImage'] = ApiClient.convertToType(data['frontImage'], 'String');
      }
      if (data.hasOwnProperty('frontImageIr')) {
        obj['frontImageIr'] = ApiClient.convertToType(data['frontImageIr'], 'String');
      }
      if (data.hasOwnProperty('frontImageUv')) {
        obj['frontImageUv'] = ApiClient.convertToType(data['frontImageUv'], 'String');
      }
      if (data.hasOwnProperty('backImage')) {
        obj['backImage'] = ApiClient.convertToType(data['backImage'], 'String');
      }
      if (data.hasOwnProperty('backImageIr')) {
        obj['backImageIr'] = ApiClient.convertToType(data['backImageIr'], 'String');
      }
      if (data.hasOwnProperty('backImageUv')) {
        obj['backImageUv'] = ApiClient.convertToType(data['backImageUv'], 'String');
      }
      if (data.hasOwnProperty('rectoImageCropped')) {
        obj['rectoImageCropped'] = ApiClient.convertToType(data['rectoImageCropped'], 'Boolean');
      }
      if (data.hasOwnProperty('faceImageCropped')) {
        obj['faceImageCropped'] = ApiClient.convertToType(data['faceImageCropped'], 'Boolean');
      }
      if (data.hasOwnProperty('signatureImageCropped')) {
        obj['signatureImageCropped'] = ApiClient.convertToType(data['signatureImageCropped'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * API version (for backward compatibility purpose)
   * @member {String} apiVersion
   */
  exports.prototype['apiVersion'] = undefined;
  /**
   * frontImage containing front daylight image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   * @member {String} frontImage
   */
  exports.prototype['frontImage'] = undefined;
  /**
   * frontImage containing front infrared image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   * @member {String} frontImageIr
   */
  exports.prototype['frontImageIr'] = undefined;
  /**
   * frontImage containing front ultraviolet image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   * @member {String} frontImageUv
   */
  exports.prototype['frontImageUv'] = undefined;
  /**
   * backImage containing daylight back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   * @member {String} backImage
   */
  exports.prototype['backImage'] = undefined;
  /**
   * backImage containing infrared back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   * @member {String} backImageIr
   */
  exports.prototype['backImageIr'] = undefined;
  /**
   * backImage containing ultraviolet back image of the identity document (base64 encoded, no wrap, jpg/png/tiff/pdf format)
   * @member {String} backImageUv
   */
  exports.prototype['backImageUv'] = undefined;
  /**
   * rectoImageCropped true to obtain recto image cropped if applicable
   * @member {Boolean} rectoImageCropped
   * @default false
   */
  exports.prototype['rectoImageCropped'] = false;
  /**
   * faceImageCropped true to obtain recto image cropped if applicable
   * @member {Boolean} faceImageCropped
   * @default false
   */
  exports.prototype['faceImageCropped'] = false;
  /**
   * signatureImageCropped true to obtain recto image cropped if applicable
   * @member {Boolean} signatureImageCropped
   * @default false
   */
  exports.prototype['signatureImageCropped'] = false;



  return exports;
}));


