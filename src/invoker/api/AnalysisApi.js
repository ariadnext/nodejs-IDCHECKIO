/**
 * IdCheck.IO API
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['invoker/ApiClient', 'invoker/model/ErrorResponse', 'invoker/model/ReportResponse', 'invoker/model/ResultResponse', 'invoker/model/TaskResponse', 'invoker/model/ImageRequest', 'invoker/model/MrzRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/ReportResponse'), require('../model/ResultResponse'), require('../model/TaskResponse'), require('../model/ImageRequest'), require('../model/MrzRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.idcheckio_nodejs_client) {
      root.idcheckio_nodejs_client = {};
    }
    root.idcheckio_nodejs_client.AnalysisApi = factory(root.idcheckio_nodejs_client.ApiClient, root.idcheckio_nodejs_client.ErrorResponse, root.idcheckio_nodejs_client.ReportResponse, root.idcheckio_nodejs_client.ResultResponse, root.idcheckio_nodejs_client.TaskResponse, root.idcheckio_nodejs_client.ImageRequest, root.idcheckio_nodejs_client.MrzRequest);
  }
}(this, function(ApiClient, ErrorResponse, ReportResponse, ResultResponse, TaskResponse, ImageRequest, MrzRequest) {
  'use strict';

  /**
   * Analysis service.
   * @module invoker/api/AnalysisApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AnalysisApi. 
   * @alias module:invoker/api/AnalysisApi
   * @class
   * @param {module:invoker/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:invoker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getReport operation.
     * @callback module:invoker/api/AnalysisApi~getReportCallback
     * @param {String} error Error message, if any.
     * @param {module:invoker/model/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HTTP GET report (demo)
     * Get a pdf report (base64 encoded) (demo)
     * @param {String} analysisRefUid Report analysisRefUid
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Accept language header
     * @param {module:invoker/api/AnalysisApi~getReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:invoker/model/ReportResponse}
     */
    this.getReport = function(analysisRefUid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'analysisRefUid' is set
      if (analysisRefUid == undefined || analysisRefUid == null) {
        throw "Missing the required parameter 'analysisRefUid' when calling getReport";
      }


      var pathParams = {
        'analysisRefUid': analysisRefUid
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['basic'];
      var contentTypes = [];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ReportResponse;

      return this.apiClient.callApi(
        '/v0/pdfreport/{analysisRefUid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResult operation.
     * @callback module:invoker/api/AnalysisApi~getResultCallback
     * @param {String} error Error message, if any.
     * @param {module:invoker/model/ResultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HTTP GET result
     * Get result controls
     * @param {String} analysisRefUid Result analysisRefUid
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Accept language header
     * @param {Boolean} opts.rectoImageCropped True to obtain recto image cropped if applicable (default to false)
     * @param {Boolean} opts.faceImageCropped True to obtain face image cropped if applicable (default to false)
     * @param {Boolean} opts.signatureImageCropped True to obtain signature image cropped if applicable (default to false)
     * @param {module:invoker/api/AnalysisApi~getResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:invoker/model/ResultResponse}
     */
    this.getResult = function(analysisRefUid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'analysisRefUid' is set
      if (analysisRefUid == undefined || analysisRefUid == null) {
        throw "Missing the required parameter 'analysisRefUid' when calling getResult";
      }


      var pathParams = {
        'analysisRefUid': analysisRefUid
      };
      var queryParams = {
        'rectoImageCropped': opts['rectoImageCropped'],
        'faceImageCropped': opts['faceImageCropped'],
        'signatureImageCropped': opts['signatureImageCropped']
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['basic'];
      var contentTypes = [];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ResultResponse;

      return this.apiClient.callApi(
        '/v0/result/{analysisRefUid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTask operation.
     * @callback module:invoker/api/AnalysisApi~getTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:invoker/model/TaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HTTP GET task
     * Get task status
     * @param {String} analysisRefUid Task analysisRefUid
     * @param {Object} opts Optional parameters
     * @param {String} opts.acceptLanguage Accept language header
     * @param {Integer} opts.wait specify a maximum wait time in milliseconds
     * @param {module:invoker/api/AnalysisApi~getTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:invoker/model/TaskResponse}
     */
    this.getTask = function(analysisRefUid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'analysisRefUid' is set
      if (analysisRefUid == undefined || analysisRefUid == null) {
        throw "Missing the required parameter 'analysisRefUid' when calling getTask";
      }


      var pathParams = {
        'analysisRefUid': analysisRefUid
      };
      var queryParams = {
        'wait': opts['wait']
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['basic'];
      var contentTypes = [];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = TaskResponse;

      return this.apiClient.callApi(
        '/v0/task/{analysisRefUid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postImage operation.
     * @callback module:invoker/api/AnalysisApi~postImageCallback
     * @param {String} error Error message, if any.
     * @param {module:invoker/model/ResultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HTTP POST task image
     * POST an image check task
     * @param {module:invoker/model/ImageRequest} body Image request
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asyncMode true to activate asynchrone mode
     * @param {String} opts.acceptLanguage Accept language header
     * @param {module:invoker/api/AnalysisApi~postImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:invoker/model/ResultResponse}
     */
    this.postImage = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling postImage";
      }


      var pathParams = {
      };
      var queryParams = {
        'asyncMode': opts['asyncMode']
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ResultResponse;

      return this.apiClient.callApi(
        '/v0/task/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postMrz operation.
     * @callback module:invoker/api/AnalysisApi~postMrzCallback
     * @param {String} error Error message, if any.
     * @param {module:invoker/model/ResultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HTTP POST task mrz
     * POST a mrz check task
     * @param {module:invoker/model/MrzRequest} body Mrz request
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.asyncMode true to activate asynchrone mode
     * @param {String} opts.acceptLanguage Accept language header
     * @param {module:invoker/api/AnalysisApi~postMrzCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:invoker/model/ResultResponse}
     */
    this.postMrz = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling postMrz";
      }


      var pathParams = {
      };
      var queryParams = {
        'asyncMode': opts['asyncMode']
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      var formParams = {
      };

      var authNames = ['basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ResultResponse;

      return this.apiClient.callApi(
        '/v0/task/mrz', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
